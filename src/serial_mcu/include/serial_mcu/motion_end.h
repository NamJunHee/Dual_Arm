// Generated by gencpp from file serial_mcu/motion_end.msg
// DO NOT EDIT!


#ifndef SERIAL_MCU_MESSAGE_MOTION_END_H
#define SERIAL_MCU_MESSAGE_MOTION_END_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace serial_mcu
{
template <class ContainerAllocator>
struct motion_end_
{
  typedef motion_end_<ContainerAllocator> Type;

  motion_end_()
    : motion_end(0)  {
    }
  motion_end_(const ContainerAllocator& _alloc)
    : motion_end(0)  {
  (void)_alloc;
    }



   typedef int32_t _motion_end_type;
  _motion_end_type motion_end;





  typedef boost::shared_ptr< ::serial_mcu::motion_end_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial_mcu::motion_end_<ContainerAllocator> const> ConstPtr;

}; // struct motion_end_

typedef ::serial_mcu::motion_end_<std::allocator<void> > motion_end;

typedef boost::shared_ptr< ::serial_mcu::motion_end > motion_endPtr;
typedef boost::shared_ptr< ::serial_mcu::motion_end const> motion_endConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serial_mcu::motion_end_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serial_mcu::motion_end_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace serial_mcu

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'serial_mcu': ['/home/robit/catkin_ws/src/serial_mcu/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::serial_mcu::motion_end_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_mcu::motion_end_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_mcu::motion_end_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_mcu::motion_end_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_mcu::motion_end_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_mcu::motion_end_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serial_mcu::motion_end_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d3aa7962353285617f39219e4e26c45c";
  }

  static const char* value(const ::serial_mcu::motion_end_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd3aa796235328561ULL;
  static const uint64_t static_value2 = 0x7f39219e4e26c45cULL;
};

template<class ContainerAllocator>
struct DataType< ::serial_mcu::motion_end_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serial_mcu/motion_end";
  }

  static const char* value(const ::serial_mcu::motion_end_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serial_mcu::motion_end_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 motion_end\n\
";
  }

  static const char* value(const ::serial_mcu::motion_end_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serial_mcu::motion_end_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motion_end);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motion_end_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serial_mcu::motion_end_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial_mcu::motion_end_<ContainerAllocator>& v)
  {
    s << indent << "motion_end: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motion_end);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_MCU_MESSAGE_MOTION_END_H
