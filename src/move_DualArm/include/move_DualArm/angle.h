// Generated by gencpp from file kuro_test/angle.msg
// DO NOT EDIT!


#ifndef KURO_TEST_MESSAGE_ANGLE_H
#define KURO_TEST_MESSAGE_ANGLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kuro_test
{
template <class ContainerAllocator>
struct angle_
{
  typedef angle_<ContainerAllocator> Type;

  angle_()
    : r_ang_1(0.0)
    , r_ang_2(0.0)
    , r_ang_3(0.0)
    , r_ang_4(0.0)
    , r_ang_5(0.0)
    , r_ang_6(0.0)
    , r_ang_7(0.0)
    , l_ang_1(0.0)
    , l_ang_2(0.0)
    , l_ang_3(0.0)
    , l_ang_4(0.0)
    , l_ang_5(0.0)
    , l_ang_6(0.0)
    , l_ang_7(0.0)  {
    }
  angle_(const ContainerAllocator& _alloc)
    : r_ang_1(0.0)
    , r_ang_2(0.0)
    , r_ang_3(0.0)
    , r_ang_4(0.0)
    , r_ang_5(0.0)
    , r_ang_6(0.0)
    , r_ang_7(0.0)
    , l_ang_1(0.0)
    , l_ang_2(0.0)
    , l_ang_3(0.0)
    , l_ang_4(0.0)
    , l_ang_5(0.0)
    , l_ang_6(0.0)
    , l_ang_7(0.0)  {
  (void)_alloc;
    }



   typedef double _r_ang_1_type;
  _r_ang_1_type r_ang_1;

   typedef double _r_ang_2_type;
  _r_ang_2_type r_ang_2;

   typedef double _r_ang_3_type;
  _r_ang_3_type r_ang_3;

   typedef double _r_ang_4_type;
  _r_ang_4_type r_ang_4;

   typedef double _r_ang_5_type;
  _r_ang_5_type r_ang_5;

   typedef double _r_ang_6_type;
  _r_ang_6_type r_ang_6;

   typedef double _r_ang_7_type;
  _r_ang_7_type r_ang_7;

   typedef double _l_ang_1_type;
  _l_ang_1_type l_ang_1;

   typedef double _l_ang_2_type;
  _l_ang_2_type l_ang_2;

   typedef double _l_ang_3_type;
  _l_ang_3_type l_ang_3;

   typedef double _l_ang_4_type;
  _l_ang_4_type l_ang_4;

   typedef double _l_ang_5_type;
  _l_ang_5_type l_ang_5;

   typedef double _l_ang_6_type;
  _l_ang_6_type l_ang_6;

   typedef double _l_ang_7_type;
  _l_ang_7_type l_ang_7;





  typedef boost::shared_ptr< ::kuro_test::angle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuro_test::angle_<ContainerAllocator> const> ConstPtr;

}; // struct angle_

typedef ::kuro_test::angle_<std::allocator<void> > angle;

typedef boost::shared_ptr< ::kuro_test::angle > anglePtr;
typedef boost::shared_ptr< ::kuro_test::angle const> angleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuro_test::angle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuro_test::angle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuro_test::angle_<ContainerAllocator1> & lhs, const ::kuro_test::angle_<ContainerAllocator2> & rhs)
{
  return lhs.r_ang_1 == rhs.r_ang_1 &&
    lhs.r_ang_2 == rhs.r_ang_2 &&
    lhs.r_ang_3 == rhs.r_ang_3 &&
    lhs.r_ang_4 == rhs.r_ang_4 &&
    lhs.r_ang_5 == rhs.r_ang_5 &&
    lhs.r_ang_6 == rhs.r_ang_6 &&
    lhs.r_ang_7 == rhs.r_ang_7 &&
    lhs.l_ang_1 == rhs.l_ang_1 &&
    lhs.l_ang_2 == rhs.l_ang_2 &&
    lhs.l_ang_3 == rhs.l_ang_3 &&
    lhs.l_ang_4 == rhs.l_ang_4 &&
    lhs.l_ang_5 == rhs.l_ang_5 &&
    lhs.l_ang_6 == rhs.l_ang_6 &&
    lhs.l_ang_7 == rhs.l_ang_7;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuro_test::angle_<ContainerAllocator1> & lhs, const ::kuro_test::angle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuro_test

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kuro_test::angle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuro_test::angle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuro_test::angle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuro_test::angle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuro_test::angle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuro_test::angle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuro_test::angle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8a9844d15e7c2d706de09370705e24dc";
  }

  static const char* value(const ::kuro_test::angle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8a9844d15e7c2d70ULL;
  static const uint64_t static_value2 = 0x6de09370705e24dcULL;
};

template<class ContainerAllocator>
struct DataType< ::kuro_test::angle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuro_test/angle";
  }

  static const char* value(const ::kuro_test::angle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuro_test::angle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 r_ang_1\n"
"float64 r_ang_2\n"
"float64 r_ang_3\n"
"float64 r_ang_4\n"
"float64 r_ang_5\n"
"float64 r_ang_6\n"
"float64 r_ang_7\n"
"float64 l_ang_1\n"
"float64 l_ang_2\n"
"float64 l_ang_3\n"
"float64 l_ang_4\n"
"float64 l_ang_5\n"
"float64 l_ang_6\n"
"float64 l_ang_7\n"
"\n"
;
  }

  static const char* value(const ::kuro_test::angle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuro_test::angle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.r_ang_1);
      stream.next(m.r_ang_2);
      stream.next(m.r_ang_3);
      stream.next(m.r_ang_4);
      stream.next(m.r_ang_5);
      stream.next(m.r_ang_6);
      stream.next(m.r_ang_7);
      stream.next(m.l_ang_1);
      stream.next(m.l_ang_2);
      stream.next(m.l_ang_3);
      stream.next(m.l_ang_4);
      stream.next(m.l_ang_5);
      stream.next(m.l_ang_6);
      stream.next(m.l_ang_7);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct angle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuro_test::angle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuro_test::angle_<ContainerAllocator>& v)
  {
    s << indent << "r_ang_1: ";
    Printer<double>::stream(s, indent + "  ", v.r_ang_1);
    s << indent << "r_ang_2: ";
    Printer<double>::stream(s, indent + "  ", v.r_ang_2);
    s << indent << "r_ang_3: ";
    Printer<double>::stream(s, indent + "  ", v.r_ang_3);
    s << indent << "r_ang_4: ";
    Printer<double>::stream(s, indent + "  ", v.r_ang_4);
    s << indent << "r_ang_5: ";
    Printer<double>::stream(s, indent + "  ", v.r_ang_5);
    s << indent << "r_ang_6: ";
    Printer<double>::stream(s, indent + "  ", v.r_ang_6);
    s << indent << "r_ang_7: ";
    Printer<double>::stream(s, indent + "  ", v.r_ang_7);
    s << indent << "l_ang_1: ";
    Printer<double>::stream(s, indent + "  ", v.l_ang_1);
    s << indent << "l_ang_2: ";
    Printer<double>::stream(s, indent + "  ", v.l_ang_2);
    s << indent << "l_ang_3: ";
    Printer<double>::stream(s, indent + "  ", v.l_ang_3);
    s << indent << "l_ang_4: ";
    Printer<double>::stream(s, indent + "  ", v.l_ang_4);
    s << indent << "l_ang_5: ";
    Printer<double>::stream(s, indent + "  ", v.l_ang_5);
    s << indent << "l_ang_6: ";
    Printer<double>::stream(s, indent + "  ", v.l_ang_6);
    s << indent << "l_ang_7: ";
    Printer<double>::stream(s, indent + "  ", v.l_ang_7);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KURO_TEST_MESSAGE_ANGLE_H
