// Generated by gencpp from file move_DualArm/joint_state.msg
// DO NOT EDIT!


#ifndef MOVE_DUALARM_MESSAGE_JOINT_STATE_H
#define MOVE_DUALARM_MESSAGE_JOINT_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace move_DualArm
{
template <class ContainerAllocator>
struct joint_state_
{
  typedef joint_state_<ContainerAllocator> Type;

  joint_state_()
    : r_sh_roll(0.0)
    , r_sh_pitch(0.0)
    , r_sh_yaw(0.0)
    , r_el_pitch(0.0)
    , r_wri_roll(0.0)
    , r_wri_pitch(0.0)
    , r_wri_yaw(0.0)
    , l_sh_roll(0.0)
    , l_sh_pitch(0.0)
    , l_sh_yaw(0.0)
    , l_el_pitch(0.0)
    , l_wri_roll(0.0)
    , l_wri_pitch(0.0)
    , l_wri_yaw(0.0)  {
    }
  joint_state_(const ContainerAllocator& _alloc)
    : r_sh_roll(0.0)
    , r_sh_pitch(0.0)
    , r_sh_yaw(0.0)
    , r_el_pitch(0.0)
    , r_wri_roll(0.0)
    , r_wri_pitch(0.0)
    , r_wri_yaw(0.0)
    , l_sh_roll(0.0)
    , l_sh_pitch(0.0)
    , l_sh_yaw(0.0)
    , l_el_pitch(0.0)
    , l_wri_roll(0.0)
    , l_wri_pitch(0.0)
    , l_wri_yaw(0.0)  {
  (void)_alloc;
    }



   typedef float _r_sh_roll_type;
  _r_sh_roll_type r_sh_roll;

   typedef float _r_sh_pitch_type;
  _r_sh_pitch_type r_sh_pitch;

   typedef float _r_sh_yaw_type;
  _r_sh_yaw_type r_sh_yaw;

   typedef float _r_el_pitch_type;
  _r_el_pitch_type r_el_pitch;

   typedef float _r_wri_roll_type;
  _r_wri_roll_type r_wri_roll;

   typedef float _r_wri_pitch_type;
  _r_wri_pitch_type r_wri_pitch;

   typedef float _r_wri_yaw_type;
  _r_wri_yaw_type r_wri_yaw;

   typedef float _l_sh_roll_type;
  _l_sh_roll_type l_sh_roll;

   typedef float _l_sh_pitch_type;
  _l_sh_pitch_type l_sh_pitch;

   typedef float _l_sh_yaw_type;
  _l_sh_yaw_type l_sh_yaw;

   typedef float _l_el_pitch_type;
  _l_el_pitch_type l_el_pitch;

   typedef float _l_wri_roll_type;
  _l_wri_roll_type l_wri_roll;

   typedef float _l_wri_pitch_type;
  _l_wri_pitch_type l_wri_pitch;

   typedef float _l_wri_yaw_type;
  _l_wri_yaw_type l_wri_yaw;





  typedef boost::shared_ptr< ::move_DualArm::joint_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::move_DualArm::joint_state_<ContainerAllocator> const> ConstPtr;

}; // struct joint_state_

typedef ::move_DualArm::joint_state_<std::allocator<void> > joint_state;

typedef boost::shared_ptr< ::move_DualArm::joint_state > joint_statePtr;
typedef boost::shared_ptr< ::move_DualArm::joint_state const> joint_stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::move_DualArm::joint_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::move_DualArm::joint_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::move_DualArm::joint_state_<ContainerAllocator1> & lhs, const ::move_DualArm::joint_state_<ContainerAllocator2> & rhs)
{
  return lhs.r_sh_roll == rhs.r_sh_roll &&
    lhs.r_sh_pitch == rhs.r_sh_pitch &&
    lhs.r_sh_yaw == rhs.r_sh_yaw &&
    lhs.r_el_pitch == rhs.r_el_pitch &&
    lhs.r_wri_roll == rhs.r_wri_roll &&
    lhs.r_wri_pitch == rhs.r_wri_pitch &&
    lhs.r_wri_yaw == rhs.r_wri_yaw &&
    lhs.l_sh_roll == rhs.l_sh_roll &&
    lhs.l_sh_pitch == rhs.l_sh_pitch &&
    lhs.l_sh_yaw == rhs.l_sh_yaw &&
    lhs.l_el_pitch == rhs.l_el_pitch &&
    lhs.l_wri_roll == rhs.l_wri_roll &&
    lhs.l_wri_pitch == rhs.l_wri_pitch &&
    lhs.l_wri_yaw == rhs.l_wri_yaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::move_DualArm::joint_state_<ContainerAllocator1> & lhs, const ::move_DualArm::joint_state_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace move_DualArm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::move_DualArm::joint_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::move_DualArm::joint_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::move_DualArm::joint_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::move_DualArm::joint_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::move_DualArm::joint_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::move_DualArm::joint_state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::move_DualArm::joint_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "017d83d2a66e1c2dba0cd64c2aff6e11";
  }

  static const char* value(const ::move_DualArm::joint_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x017d83d2a66e1c2dULL;
  static const uint64_t static_value2 = 0xba0cd64c2aff6e11ULL;
};

template<class ContainerAllocator>
struct DataType< ::move_DualArm::joint_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "move_DualArm/joint_state";
  }

  static const char* value(const ::move_DualArm::joint_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::move_DualArm::joint_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 r_sh_roll\n"
"float32 r_sh_pitch\n"
"float32 r_sh_yaw\n"
"float32 r_el_pitch\n"
"float32 r_wri_roll\n"
"float32 r_wri_pitch\n"
"float32 r_wri_yaw\n"
"float32 l_sh_roll\n"
"float32 l_sh_pitch\n"
"float32 l_sh_yaw\n"
"float32 l_el_pitch\n"
"float32 l_wri_roll\n"
"float32 l_wri_pitch\n"
"float32 l_wri_yaw\n"
;
  }

  static const char* value(const ::move_DualArm::joint_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::move_DualArm::joint_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.r_sh_roll);
      stream.next(m.r_sh_pitch);
      stream.next(m.r_sh_yaw);
      stream.next(m.r_el_pitch);
      stream.next(m.r_wri_roll);
      stream.next(m.r_wri_pitch);
      stream.next(m.r_wri_yaw);
      stream.next(m.l_sh_roll);
      stream.next(m.l_sh_pitch);
      stream.next(m.l_sh_yaw);
      stream.next(m.l_el_pitch);
      stream.next(m.l_wri_roll);
      stream.next(m.l_wri_pitch);
      stream.next(m.l_wri_yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct joint_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::move_DualArm::joint_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::move_DualArm::joint_state_<ContainerAllocator>& v)
  {
    s << indent << "r_sh_roll: ";
    Printer<float>::stream(s, indent + "  ", v.r_sh_roll);
    s << indent << "r_sh_pitch: ";
    Printer<float>::stream(s, indent + "  ", v.r_sh_pitch);
    s << indent << "r_sh_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.r_sh_yaw);
    s << indent << "r_el_pitch: ";
    Printer<float>::stream(s, indent + "  ", v.r_el_pitch);
    s << indent << "r_wri_roll: ";
    Printer<float>::stream(s, indent + "  ", v.r_wri_roll);
    s << indent << "r_wri_pitch: ";
    Printer<float>::stream(s, indent + "  ", v.r_wri_pitch);
    s << indent << "r_wri_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.r_wri_yaw);
    s << indent << "l_sh_roll: ";
    Printer<float>::stream(s, indent + "  ", v.l_sh_roll);
    s << indent << "l_sh_pitch: ";
    Printer<float>::stream(s, indent + "  ", v.l_sh_pitch);
    s << indent << "l_sh_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.l_sh_yaw);
    s << indent << "l_el_pitch: ";
    Printer<float>::stream(s, indent + "  ", v.l_el_pitch);
    s << indent << "l_wri_roll: ";
    Printer<float>::stream(s, indent + "  ", v.l_wri_roll);
    s << indent << "l_wri_pitch: ";
    Printer<float>::stream(s, indent + "  ", v.l_wri_pitch);
    s << indent << "l_wri_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.l_wri_yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVE_DUALARM_MESSAGE_JOINT_STATE_H
