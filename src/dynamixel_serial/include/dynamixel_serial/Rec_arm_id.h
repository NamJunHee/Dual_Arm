// Generated by gencpp from file order_kuro/Rec_arm_id.msg
// DO NOT EDIT!


#ifndef ORDER_KURO_MESSAGE_REC_ARM_ID_H
#define ORDER_KURO_MESSAGE_REC_ARM_ID_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace order_kuro
{
template <class ContainerAllocator>
struct Rec_arm_id_
{
  typedef Rec_arm_id_<ContainerAllocator> Type;

  Rec_arm_id_()
    : r_arm(0)
    , l_arm(0)  {
    }
  Rec_arm_id_(const ContainerAllocator& _alloc)
    : r_arm(0)
    , l_arm(0)  {
  (void)_alloc;
    }



   typedef int32_t _r_arm_type;
  _r_arm_type r_arm;

   typedef int32_t _l_arm_type;
  _l_arm_type l_arm;





  typedef boost::shared_ptr< ::order_kuro::Rec_arm_id_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::order_kuro::Rec_arm_id_<ContainerAllocator> const> ConstPtr;

}; // struct Rec_arm_id_

typedef ::order_kuro::Rec_arm_id_<std::allocator<void> > Rec_arm_id;

typedef boost::shared_ptr< ::order_kuro::Rec_arm_id > Rec_arm_idPtr;
typedef boost::shared_ptr< ::order_kuro::Rec_arm_id const> Rec_arm_idConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::order_kuro::Rec_arm_id_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::order_kuro::Rec_arm_id_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::order_kuro::Rec_arm_id_<ContainerAllocator1> & lhs, const ::order_kuro::Rec_arm_id_<ContainerAllocator2> & rhs)
{
  return lhs.r_arm == rhs.r_arm &&
    lhs.l_arm == rhs.l_arm;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::order_kuro::Rec_arm_id_<ContainerAllocator1> & lhs, const ::order_kuro::Rec_arm_id_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace order_kuro

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::order_kuro::Rec_arm_id_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::order_kuro::Rec_arm_id_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::order_kuro::Rec_arm_id_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::order_kuro::Rec_arm_id_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::order_kuro::Rec_arm_id_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::order_kuro::Rec_arm_id_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::order_kuro::Rec_arm_id_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4ba4459ef4dd9d75972b41dfa69d6883";
  }

  static const char* value(const ::order_kuro::Rec_arm_id_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4ba4459ef4dd9d75ULL;
  static const uint64_t static_value2 = 0x972b41dfa69d6883ULL;
};

template<class ContainerAllocator>
struct DataType< ::order_kuro::Rec_arm_id_<ContainerAllocator> >
{
  static const char* value()
  {
    return "order_kuro/Rec_arm_id";
  }

  static const char* value(const ::order_kuro::Rec_arm_id_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::order_kuro::Rec_arm_id_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 r_arm\n"
"int32 l_arm\n"
"\n"
;
  }

  static const char* value(const ::order_kuro::Rec_arm_id_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::order_kuro::Rec_arm_id_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.r_arm);
      stream.next(m.l_arm);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Rec_arm_id_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::order_kuro::Rec_arm_id_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::order_kuro::Rec_arm_id_<ContainerAllocator>& v)
  {
    s << indent << "r_arm: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r_arm);
    s << indent << "l_arm: ";
    Printer<int32_t>::stream(s, indent + "  ", v.l_arm);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ORDER_KURO_MESSAGE_REC_ARM_ID_H
