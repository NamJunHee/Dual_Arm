// Generated by gencpp from file order_kuro/loca_order.msg
// DO NOT EDIT!


#ifndef ORDER_KURO_MESSAGE_LOCA_ORDER_H
#define ORDER_KURO_MESSAGE_LOCA_ORDER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace order_kuro
{
template <class ContainerAllocator>
struct loca_order_
{
  typedef loca_order_<ContainerAllocator> Type;

  loca_order_()
    : r_pX(0.0)
    , r_pY(0.0)
    , r_pZ(0.0)
    , l_pX(0.0)
    , l_pY(0.0)
    , l_pZ(0.0)
    , r_elbow_dir(0.0)
    , l_elbow_dir(0.0)
    , max_step(0.0)
    , motion_time(0.0)  {
    }
  loca_order_(const ContainerAllocator& _alloc)
    : r_pX(0.0)
    , r_pY(0.0)
    , r_pZ(0.0)
    , l_pX(0.0)
    , l_pY(0.0)
    , l_pZ(0.0)
    , r_elbow_dir(0.0)
    , l_elbow_dir(0.0)
    , max_step(0.0)
    , motion_time(0.0)  {
  (void)_alloc;
    }



   typedef float _r_pX_type;
  _r_pX_type r_pX;

   typedef float _r_pY_type;
  _r_pY_type r_pY;

   typedef float _r_pZ_type;
  _r_pZ_type r_pZ;

   typedef float _l_pX_type;
  _l_pX_type l_pX;

   typedef float _l_pY_type;
  _l_pY_type l_pY;

   typedef float _l_pZ_type;
  _l_pZ_type l_pZ;

   typedef float _r_elbow_dir_type;
  _r_elbow_dir_type r_elbow_dir;

   typedef float _l_elbow_dir_type;
  _l_elbow_dir_type l_elbow_dir;

   typedef float _max_step_type;
  _max_step_type max_step;

   typedef float _motion_time_type;
  _motion_time_type motion_time;





  typedef boost::shared_ptr< ::order_kuro::loca_order_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::order_kuro::loca_order_<ContainerAllocator> const> ConstPtr;

}; // struct loca_order_

typedef ::order_kuro::loca_order_<std::allocator<void> > loca_order;

typedef boost::shared_ptr< ::order_kuro::loca_order > loca_orderPtr;
typedef boost::shared_ptr< ::order_kuro::loca_order const> loca_orderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::order_kuro::loca_order_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::order_kuro::loca_order_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::order_kuro::loca_order_<ContainerAllocator1> & lhs, const ::order_kuro::loca_order_<ContainerAllocator2> & rhs)
{
  return lhs.r_pX == rhs.r_pX &&
    lhs.r_pY == rhs.r_pY &&
    lhs.r_pZ == rhs.r_pZ &&
    lhs.l_pX == rhs.l_pX &&
    lhs.l_pY == rhs.l_pY &&
    lhs.l_pZ == rhs.l_pZ &&
    lhs.r_elbow_dir == rhs.r_elbow_dir &&
    lhs.l_elbow_dir == rhs.l_elbow_dir &&
    lhs.max_step == rhs.max_step &&
    lhs.motion_time == rhs.motion_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::order_kuro::loca_order_<ContainerAllocator1> & lhs, const ::order_kuro::loca_order_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace order_kuro

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::order_kuro::loca_order_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::order_kuro::loca_order_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::order_kuro::loca_order_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::order_kuro::loca_order_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::order_kuro::loca_order_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::order_kuro::loca_order_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::order_kuro::loca_order_<ContainerAllocator> >
{
  static const char* value()
  {
    return "90b8e7774d399c6568811b2c225a6d63";
  }

  static const char* value(const ::order_kuro::loca_order_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x90b8e7774d399c65ULL;
  static const uint64_t static_value2 = 0x68811b2c225a6d63ULL;
};

template<class ContainerAllocator>
struct DataType< ::order_kuro::loca_order_<ContainerAllocator> >
{
  static const char* value()
  {
    return "order_kuro/loca_order";
  }

  static const char* value(const ::order_kuro::loca_order_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::order_kuro::loca_order_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 r_pX\n"
"float32 r_pY\n"
"float32 r_pZ\n"
"float32 l_pX\n"
"float32 l_pY\n"
"float32 l_pZ\n"
"float32 r_elbow_dir\n"
"float32 l_elbow_dir\n"
"float32 max_step\n"
"float32 motion_time\n"
"\n"
;
  }

  static const char* value(const ::order_kuro::loca_order_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::order_kuro::loca_order_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.r_pX);
      stream.next(m.r_pY);
      stream.next(m.r_pZ);
      stream.next(m.l_pX);
      stream.next(m.l_pY);
      stream.next(m.l_pZ);
      stream.next(m.r_elbow_dir);
      stream.next(m.l_elbow_dir);
      stream.next(m.max_step);
      stream.next(m.motion_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct loca_order_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::order_kuro::loca_order_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::order_kuro::loca_order_<ContainerAllocator>& v)
  {
    s << indent << "r_pX: ";
    Printer<float>::stream(s, indent + "  ", v.r_pX);
    s << indent << "r_pY: ";
    Printer<float>::stream(s, indent + "  ", v.r_pY);
    s << indent << "r_pZ: ";
    Printer<float>::stream(s, indent + "  ", v.r_pZ);
    s << indent << "l_pX: ";
    Printer<float>::stream(s, indent + "  ", v.l_pX);
    s << indent << "l_pY: ";
    Printer<float>::stream(s, indent + "  ", v.l_pY);
    s << indent << "l_pZ: ";
    Printer<float>::stream(s, indent + "  ", v.l_pZ);
    s << indent << "r_elbow_dir: ";
    Printer<float>::stream(s, indent + "  ", v.r_elbow_dir);
    s << indent << "l_elbow_dir: ";
    Printer<float>::stream(s, indent + "  ", v.l_elbow_dir);
    s << indent << "max_step: ";
    Printer<float>::stream(s, indent + "  ", v.max_step);
    s << indent << "motion_time: ";
    Printer<float>::stream(s, indent + "  ", v.motion_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ORDER_KURO_MESSAGE_LOCA_ORDER_H
