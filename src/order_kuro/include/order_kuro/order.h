// Generated by gencpp from file order_kuro/order.msg
// DO NOT EDIT!


#ifndef ORDER_KURO_MESSAGE_ORDER_H
#define ORDER_KURO_MESSAGE_ORDER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace order_kuro
{
template <class ContainerAllocator>
struct order_
{
  typedef order_<ContainerAllocator> Type;

  order_()
    : r_ang_1(0.0)
    , r_ang_2(0.0)
    , r_ang_3(0.0)
    , r_ang_4(0.0)
    , r_ang_5(0.0)
    , r_ang_6(0.0)
    , r_ang_7(0.0)
    , l_ang_1(0.0)
    , l_ang_2(0.0)
    , l_ang_3(0.0)
    , l_ang_4(0.0)
    , l_ang_5(0.0)
    , l_ang_6(0.0)
    , l_ang_7(0.0)
    , pX(0.0)
    , pY(0.0)
    , pZ(0.0)
    , gripper(0.0)  {
    }
  order_(const ContainerAllocator& _alloc)
    : r_ang_1(0.0)
    , r_ang_2(0.0)
    , r_ang_3(0.0)
    , r_ang_4(0.0)
    , r_ang_5(0.0)
    , r_ang_6(0.0)
    , r_ang_7(0.0)
    , l_ang_1(0.0)
    , l_ang_2(0.0)
    , l_ang_3(0.0)
    , l_ang_4(0.0)
    , l_ang_5(0.0)
    , l_ang_6(0.0)
    , l_ang_7(0.0)
    , pX(0.0)
    , pY(0.0)
    , pZ(0.0)
    , gripper(0.0)  {
  (void)_alloc;
    }



   typedef float _r_ang_1_type;
  _r_ang_1_type r_ang_1;

   typedef float _r_ang_2_type;
  _r_ang_2_type r_ang_2;

   typedef float _r_ang_3_type;
  _r_ang_3_type r_ang_3;

   typedef float _r_ang_4_type;
  _r_ang_4_type r_ang_4;

   typedef float _r_ang_5_type;
  _r_ang_5_type r_ang_5;

   typedef float _r_ang_6_type;
  _r_ang_6_type r_ang_6;

   typedef float _r_ang_7_type;
  _r_ang_7_type r_ang_7;

   typedef float _l_ang_1_type;
  _l_ang_1_type l_ang_1;

   typedef float _l_ang_2_type;
  _l_ang_2_type l_ang_2;

   typedef float _l_ang_3_type;
  _l_ang_3_type l_ang_3;

   typedef float _l_ang_4_type;
  _l_ang_4_type l_ang_4;

   typedef float _l_ang_5_type;
  _l_ang_5_type l_ang_5;

   typedef float _l_ang_6_type;
  _l_ang_6_type l_ang_6;

   typedef float _l_ang_7_type;
  _l_ang_7_type l_ang_7;

   typedef float _pX_type;
  _pX_type pX;

   typedef float _pY_type;
  _pY_type pY;

   typedef float _pZ_type;
  _pZ_type pZ;

   typedef float _gripper_type;
  _gripper_type gripper;





  typedef boost::shared_ptr< ::order_kuro::order_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::order_kuro::order_<ContainerAllocator> const> ConstPtr;

}; // struct order_

typedef ::order_kuro::order_<std::allocator<void> > order;

typedef boost::shared_ptr< ::order_kuro::order > orderPtr;
typedef boost::shared_ptr< ::order_kuro::order const> orderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::order_kuro::order_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::order_kuro::order_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::order_kuro::order_<ContainerAllocator1> & lhs, const ::order_kuro::order_<ContainerAllocator2> & rhs)
{
  return lhs.r_ang_1 == rhs.r_ang_1 &&
    lhs.r_ang_2 == rhs.r_ang_2 &&
    lhs.r_ang_3 == rhs.r_ang_3 &&
    lhs.r_ang_4 == rhs.r_ang_4 &&
    lhs.r_ang_5 == rhs.r_ang_5 &&
    lhs.r_ang_6 == rhs.r_ang_6 &&
    lhs.r_ang_7 == rhs.r_ang_7 &&
    lhs.l_ang_1 == rhs.l_ang_1 &&
    lhs.l_ang_2 == rhs.l_ang_2 &&
    lhs.l_ang_3 == rhs.l_ang_3 &&
    lhs.l_ang_4 == rhs.l_ang_4 &&
    lhs.l_ang_5 == rhs.l_ang_5 &&
    lhs.l_ang_6 == rhs.l_ang_6 &&
    lhs.l_ang_7 == rhs.l_ang_7 &&
    lhs.pX == rhs.pX &&
    lhs.pY == rhs.pY &&
    lhs.pZ == rhs.pZ &&
    lhs.gripper == rhs.gripper;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::order_kuro::order_<ContainerAllocator1> & lhs, const ::order_kuro::order_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace order_kuro

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::order_kuro::order_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::order_kuro::order_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::order_kuro::order_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::order_kuro::order_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::order_kuro::order_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::order_kuro::order_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::order_kuro::order_<ContainerAllocator> >
{
  static const char* value()
  {
    return "337332c93e480be0326c4d63ba32afa4";
  }

  static const char* value(const ::order_kuro::order_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x337332c93e480be0ULL;
  static const uint64_t static_value2 = 0x326c4d63ba32afa4ULL;
};

template<class ContainerAllocator>
struct DataType< ::order_kuro::order_<ContainerAllocator> >
{
  static const char* value()
  {
    return "order_kuro/order";
  }

  static const char* value(const ::order_kuro::order_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::order_kuro::order_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 r_ang_1\n"
"float32 r_ang_2\n"
"float32 r_ang_3\n"
"float32 r_ang_4\n"
"float32 r_ang_5\n"
"float32 r_ang_6\n"
"float32 r_ang_7\n"
"float32 l_ang_1\n"
"float32 l_ang_2\n"
"float32 l_ang_3\n"
"float32 l_ang_4\n"
"float32 l_ang_5\n"
"float32 l_ang_6\n"
"float32 l_ang_7\n"
"float32 pX\n"
"float32 pY\n"
"float32 pZ\n"
"float32 gripper\n"
;
  }

  static const char* value(const ::order_kuro::order_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::order_kuro::order_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.r_ang_1);
      stream.next(m.r_ang_2);
      stream.next(m.r_ang_3);
      stream.next(m.r_ang_4);
      stream.next(m.r_ang_5);
      stream.next(m.r_ang_6);
      stream.next(m.r_ang_7);
      stream.next(m.l_ang_1);
      stream.next(m.l_ang_2);
      stream.next(m.l_ang_3);
      stream.next(m.l_ang_4);
      stream.next(m.l_ang_5);
      stream.next(m.l_ang_6);
      stream.next(m.l_ang_7);
      stream.next(m.pX);
      stream.next(m.pY);
      stream.next(m.pZ);
      stream.next(m.gripper);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct order_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::order_kuro::order_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::order_kuro::order_<ContainerAllocator>& v)
  {
    s << indent << "r_ang_1: ";
    Printer<float>::stream(s, indent + "  ", v.r_ang_1);
    s << indent << "r_ang_2: ";
    Printer<float>::stream(s, indent + "  ", v.r_ang_2);
    s << indent << "r_ang_3: ";
    Printer<float>::stream(s, indent + "  ", v.r_ang_3);
    s << indent << "r_ang_4: ";
    Printer<float>::stream(s, indent + "  ", v.r_ang_4);
    s << indent << "r_ang_5: ";
    Printer<float>::stream(s, indent + "  ", v.r_ang_5);
    s << indent << "r_ang_6: ";
    Printer<float>::stream(s, indent + "  ", v.r_ang_6);
    s << indent << "r_ang_7: ";
    Printer<float>::stream(s, indent + "  ", v.r_ang_7);
    s << indent << "l_ang_1: ";
    Printer<float>::stream(s, indent + "  ", v.l_ang_1);
    s << indent << "l_ang_2: ";
    Printer<float>::stream(s, indent + "  ", v.l_ang_2);
    s << indent << "l_ang_3: ";
    Printer<float>::stream(s, indent + "  ", v.l_ang_3);
    s << indent << "l_ang_4: ";
    Printer<float>::stream(s, indent + "  ", v.l_ang_4);
    s << indent << "l_ang_5: ";
    Printer<float>::stream(s, indent + "  ", v.l_ang_5);
    s << indent << "l_ang_6: ";
    Printer<float>::stream(s, indent + "  ", v.l_ang_6);
    s << indent << "l_ang_7: ";
    Printer<float>::stream(s, indent + "  ", v.l_ang_7);
    s << indent << "pX: ";
    Printer<float>::stream(s, indent + "  ", v.pX);
    s << indent << "pY: ";
    Printer<float>::stream(s, indent + "  ", v.pY);
    s << indent << "pZ: ";
    Printer<float>::stream(s, indent + "  ", v.pZ);
    s << indent << "gripper: ";
    Printer<float>::stream(s, indent + "  ", v.gripper);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ORDER_KURO_MESSAGE_ORDER_H
